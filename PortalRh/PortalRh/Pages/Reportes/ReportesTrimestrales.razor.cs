// <auto-generated />
using ClosedXML.Excel;

using Microsoft.JSInterop;
using PortalRh.Models;
using System.IO.Compression;

namespace PortalRh.Pages.Reportes
{
    public partial class ReportesTrimestrales
    {
        private List<TrimestralDocentesModel> reporte = new List<TrimestralDocentesModel>();
        private List<Reg_trimestral> RegistroTrimestral;
        private List<TrimestralBY1Model> TrimestralBY1Models;
       
        private List<PeriodoModel> PeriodoModels;
        private string selectedDbTable = "";
        private string Campania = "";
        private string PeriodoInicio = "";
        private string PeriodoFin = "";
        private string TablaAnterior = "";
        private string Trimestre = "";

        protected override async Task OnInitializedAsync()
        {
            try
            {
                RegistroTrimestral = await myService.GetReg_Trimestrals();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

        private void OnSelectedDbTableChanged(string value)
        {
            // Dividimos el valor de la dbtable y campaña
            var values = value.Split('|');
            if (values.Length == 6)
            {
                selectedDbTable = values[0]; // obtiene el DbTable
                Campania = values[1];// obtiene la campaña
                PeriodoInicio = values[2];
                PeriodoFin = values[3];
                TablaAnterior = values[4];
                Trimestre = values[5];
            }
        }

        private async Task ExportarexcelTrimestralDOC()
        {
            //Console.Write(selectedDbTable);
            var Reporte = await myService.GetTrimestralDocentes(selectedDbTable);

            try
            {
                // Agrupar elementos por el campo QnaPago
                var gruposPorQnaPago = Reporte.GroupBy(item => item.QnaPago);

                foreach (var grupo in gruposPorQnaPago)
                {
                    using (var zipStream = new MemoryStream())
                    {
                        // Crear el ZipArchive en modo de creación para cada grupo
                        using (var archive = new ZipArchive(zipStream, ZipArchiveMode.Create, leaveOpen: true))
                        {
                            // Crear el archivo .txt dentro del archivo .zip
                            string nombreTxt = $"C23{Campania}{DateTime.Now.Year}NOR0{grupo.Key.ToString().Substring(4, 2).PadLeft(2, '0')}V01.txt";
                            var zipEntry = archive.CreateEntry(nombreTxt, CompressionLevel.Optimal);

                            // Escribir el contenido del archivo .txt en la entrada del ZIP
                            using (var entryStream = zipEntry.Open())
                            using (var writer = new StreamWriter(entryStream))
                            {
                                foreach (var item in grupo)
                                {
                                    // Crear la lista de valores
                                    var values = new List<string>
                                    {
                                    "1",
                                    "2",
                                    item.QnaPago.ToString().Trim(),
                                    "A",
                                    item.NombreCCT.Trim(),
                                    "120",
                                    item.RFC.Trim(),
                                    item.CURP.Trim(),
                                    "99999999",
                                    item.NombreCompleto.Trim(),
                                    item.Nomb.Trim(),
                                    item.Ap1.Trim(),
                                    item.Ap2.Trim(),
                                    item.RFC.Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "4",
                                    "",
                                    " 12101 " ,
                                    "11301",
                                    "23",
                                    "4",
                                    item.CATEG.Trim(),
                                    "0",
                                    "0",
                                    "1",
                                    "1",
                                    "B",
                                    item.SumFederalTotal.ToString("0.00").Trim(),
                                    "0",
                                    "0",
                                    "3",
                                    "1",
                                    "2",
                                    item.Titu.Trim(),
                                    "14",
                                    "P",
                                    "P001A",
                                    item.P001A.ToString("0.00").Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "P",
                                    "P001B",
                                    item.P001B.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "P",
                                    "P001C",
                                    item.P001C.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "P",
                                    "P002A",
                                    item.P002A.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "P",
                                    "P009A",
                                    item.P009A.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "P",
                                    "P016L",
                                    item.P016L.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "P",
                                    "P016M",
                                    item.P016M.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "A",
                                    "A003E",
                                    item.A003E.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "A",
                                    "A0500",
                                    item.A0500.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "A",
                                    "A0625",
                                    item.A0625.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "A",
                                    "A0750",
                                    item.A0750.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "A",
                                    "A5000",
                                    item.A5000.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "A",
                                    "A5175",
                                    item.A5175.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    item.QnaPago.ToString().Trim(),
                                    "F",
                                    "A",
                                    "A8095",
                                    item.A8095.ToString().Trim(),
                                    "1",
                                    "1",
                                    item.Pipe.Trim()
                                    };

                                    // Escribir los valores al archivo
                                    await writer.WriteLineAsync(string.Join("|", values));
                                }
                            }
                        }

                        // Después de cerrar el ZipArchive, el MemoryStream 'zipStream' contiene el archivo ZIP completo
                        zipStream.Position = 0; // Reiniciar la posición del stream

                        // Convertir el ZIP a una cadena base64 para enviarlo al cliente
                        string base64Zip = Convert.ToBase64String(zipStream.ToArray());

                        // Nombre del archivo ZIP, individual para cada QnaPago
                        string nombreZip = $"C23{Campania}{DateTime.Now.Year}NHO0{grupo.Key.ToString().Substring(4, 2).PadLeft(2, '0')}V01.zip";

                        // Invocar el servicio JavaScript para descargar el ZIP
                        await _JsService.InvokeAsync<object>(
                            "DownloadZip", 
                            nombreZip,
                            base64Zip
                        );
                    }
                }
            }
            catch (Exception ex)
            {
                Console.Write(ex);
                Console.WriteLine(Campania);
            }
        }

        private async Task ExportarexcelTrimestralADM()
        {


            var Reporte = await myService.GetTrimestralADM(selectedDbTable);

            //Console.Write(selectedDbTable);


            try
            {
                // Agrupar elementos por el campo QnaPago
                var gruposPorQnaPago = Reporte.GroupBy(item => item.Qna_pago);

                foreach (var grupo in gruposPorQnaPago)
                {
                    using (var zipStream = new MemoryStream())
                    {
                        // Crear el ZipArchive en modo de creación para cada grupo
                        using (var archive = new ZipArchive(zipStream, ZipArchiveMode.Create, leaveOpen: true))
                        {
                            // Crear el archivo .txt dentro del archivo .zip
                            string nombreTxt = $"C23{Campania}{DateTime.Now.Year}NOR0{grupo.Key.ToString().Substring(4, 2).PadLeft(2, '0')}V01.txt";
                            var zipEntry = archive.CreateEntry(nombreTxt, CompressionLevel.Optimal);

                            // Escribir el contenido del archivo .txt en la entrada del ZIP
                            using (var entryStream = zipEntry.Open())
                            using (var writer = new StreamWriter(entryStream))
                            {

                                foreach (var item in grupo)
                                {
                                    try
                                    {
                                        // Crear la lista de valores
                                        var values = new List<string>
                                        {
                                            "1",
                                            "2",
                                            item.Qna_pago.ToString().Trim(),
                                            "A",
                                            item.NombreCCT.Trim(),
                                            "120",
                                            item.RFC,
                                            item.CURP,
                                            "",
                                            "",
                                            item.Nombre.ToString().Trim(),
                                            "",
                                            "",
                                            "",
                                            "23625",
                                            "2",
                                            item.Concatenated.ToString().Trim(),
                                            "1101",
                                            "11301",
                                            "23",
                                            item.CT.ToString().Trim(),
                                            item.CATEG.ToString().Trim(),
                                            "40",
                                            item.PLAZA.ToString().Trim(),
                                            "1",
                                            "1",
                                            "B",
                                            item.SUM_FEDERAL_TOTAL.ToString().Trim(),
                                            "0",
                                            "0",
                                            "9",
                                            "50",

                                            "P",
                                            "P001A",
                                            item.P001A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                        
                                            "F",
                                            "P",
                                            "P002A",
                                            item.P002A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                        
                                            "F",
                                            "P",
                                            "P009A",
                                            item.P009A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P010A",
                                            item.P010A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P016A",
                                            item.P016A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P016B",
                                            item.P016B.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P016D",
                                            item.P016D.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P016E",
                                            item.P016E.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P016I",
                                            item.P016I.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P016J",
                                            item.P016J.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P016K",
                                            item.P016K.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P016L",
                                            item.P016L.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P016R",
                                            item.P016R.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P021A",
                                            item.P021A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                        
                                            "F",
                                            "P",
                                            "P022A",
                                            item.P022A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P038A",
                                            item.P038A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P038B",
                                            item.P038B.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P038C",
                                            item.P038C.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P038K",
                                            item.P038K.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "P039A",
                                            item.P039A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "P",
                                            "D001A",
                                            item.D001A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D001B",
                                            item.D001B.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D001C",
                                            item.D001C.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D001D",
                                            item.D001D.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D001E",
                                            item.D001E.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            item.D002AConcepto.ToString().Trim(),
                                            item.D002A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D003E",
                                            item.D003E.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                           "D004A",
                                            item.D004A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D004B",
                                            item.D004B.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D004C",
                                            item.D004C.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D004E",
                                            item.D004E.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D004K",
                                            item.D004K.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D007A",
                                            item.D007A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D009A",
                                            item.D009A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D009B",
                                            item.D009B.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D009C",
                                            item.D009C.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D011A",
                                            item.D011A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D019A",
                                            item.D019A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D019C",
                                            item.D019C.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "D099A",
                                            item.D099A.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "A003E",
                                            item.A003E.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "A0454",
                                            item.A0454.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "A0500",
                                            item.A0500.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "A0625",
                                            item.A0625.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "A0750",
                                            item.A0750.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),

                                            "F",
                                            "D",
                                            "A5000",
                                            item.A5000.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            item.Qna_pago.ToString().Trim(),
                                            "2",
                                            "2",
                                            item.Pipe.Trim()
                                        };

                                        // Escribir los valores al archivo
                                        await writer.WriteLineAsync(string.Join("|", values));

                                    }
                                    catch (Exception ex)
                                    {
                                        Console.WriteLine(ex.ToString());
                                    }

                                }
                                //Console.WriteLine(grupo.Key);
                            }
                        }

                        // Después de cerrar el ZipArchive, el MemoryStream 'zipStream' contiene el archivo ZIP completo
                        zipStream.Position = 0; // Reiniciar la posición del stream

                        // Convertir el ZIP a una cadena base64 para enviarlo al cliente
                        string base64Zip = Convert.ToBase64String(zipStream.ToArray());

                        // Nombre del archivo ZIP, individual para cada QnaPago
                        string nombreZip = $"C23{Campania}{DateTime.Now.Year}NOR0{grupo.Key.ToString().Substring(4, 2).PadLeft(2, '0')}V01.zip";
                        //Console.WriteLine(nombreZip);
                        // Invocar el servicio JavaScript para descargar el ZIP
                        //await Task.Delay(500);
                        await _JsService.InvokeAsync<object>(
                            "DownloadZip", //funcion js
                            nombreZip,
                            base64Zip
                        );
                    }
                }
            }
            catch (Exception ex)
            {
                Console.Write(ex);
            }

        }

        private async Task ExportarExce() {

            var BY1 = await myService.GetTrimestralBY1Models(selectedDbTable);
            var CY1 = await myService.GetTrimestralCY1Models(selectedDbTable);
            var D2 = await myService.GetTrimestralD2Models(selectedDbTable, TablaAnterior);
            var D6 = await myService.GetTrimestralD6Models(selectedDbTable);
            var PeriodoModels = await myService.GetPeriodoModels(selectedDbTable);
            var H = await myService.GetTrimestralHModels(selectedDbTable, TablaAnterior);
            var periodo = PeriodoModels.FirstOrDefault();
            var periodoInicial = periodo.periodoini;
            var periodoFinal = periodo.periodofin;
            var filasBY1 = BY1.Count();
            var filasCY1 = CY1.Count();
            var filasD2 = D2.Count();
            var filasD6 = D6.Count();
            var filasH = H.Count();
            int startRowBY1 = 14;
            int startRowCY1 = 15;
            int startRowD2 = 13;
            int startRowD6 = 13;
            int startRowH = 13;

            try
            {
                // Ruta de la plantilla de Excel
                string rutaPlantilla = "wwwroot/Templates/ART732024Template.xlsx";

                // Cargar la plantilla
                using (var book = new XLWorkbook(rutaPlantilla))
                {
                    // Acceder a la primera hoja de trabajo de la plantilla
                    IXLWorksheet BY1WSheet = book.Worksheet(5);
                    if (filasBY1 > 0)
                    {
                        //insertar filas adicionales 

                        BY1WSheet.Row(startRowBY1).InsertRowsBelow(filasBY1 - 1);
                        var newRowsRangeBY1 = BY1WSheet.Range(startRowBY1, 1, startRowBY1 + filasBY1 - 1, BY1WSheet.LastColumnUsed().ColumnNumber());
                        //newRowsRangeBY1.Style.Fill.BackgroundColor = XLColor.White;
                        // Llenar datos en la primera hoja
                        for (int rowBY1 = 1; rowBY1 <= BY1.Count; rowBY1++)
                        {

                            int j = 2;
                            var ROWBY1F = rowBY1 + 13;
                            var item = BY1[rowBY1 - 1];
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 23;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = item.RFC;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = item.CURP;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = item.nombre;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = item.cct;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = item.TipADM;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = item.TipDOC;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = item.TipADMM;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = item.TipDOCC;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = 0;
                            BY1WSheet.Cell(ROWBY1F, j++).Value = item.SUMA;

                        }

                        int formulaRowBY1 = startRowBY1 + filasBY1;
                        BY1WSheet.Cell(formulaRowBY1, 25).FormulaA1 = $"=SUM(Y14:Y{formulaRowBY1 - 1})";
                        BY1WSheet.Cell(formulaRowBY1, 3).FormulaA1 = $"=COUNTA(C14:C{formulaRowBY1 - 1})";
                    
                    }

                    IXLWorksheet CY1WSheet = book.Worksheet(6);
                    if (filasCY1 > 0)
                    {
                        // insertar filas adicionales 
                        
                        CY1WSheet.Row(startRowCY1).InsertRowsBelow(filasCY1 - 1);
                        var newRowsRangeCY1 = CY1WSheet.Range(startRowCY1, 1, startRowCY1 + filasCY1 - 1, CY1WSheet.LastColumnUsed().ColumnNumber());
                        //newRowsRangeCY1.Style.Fill.BackgroundColor = XLColor.White;
                    
                        for (int rowCY1 = 1; rowCY1 <= CY1.Count; rowCY1++)
                        {

                            int j = 2;
                            var ROWCY1F = rowCY1 + 14;
                            var item = CY1[rowCY1 - 1];
                            
                            CY1WSheet.Cell(ROWCY1F, j++).Value = 23;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.Cve;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = 120;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.RFC;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.CURP;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.Nombre;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.CATEG;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = 40;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.partpres;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = 1000;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.cveUnidad;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = 0;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.CATEG;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = 40;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.plaza;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.CATEG;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.RFC;
                            CY1WSheet.Cell(ROWCY1F, j++).Value = periodoInicial; 
                            CY1WSheet.Cell(ROWCY1F, j++).Value = periodoFinal;                            
                            CY1WSheet.Cell(ROWCY1F, j++).Value = item.TOTALPERC;
                            
                        }
                        int formulaRowCY1 = startRowCY1 + filasCY1;
                        
                        CY1WSheet.Cell(formulaRowCY1, 5).FormulaA1 = $"=COUNTA(E15:E{formulaRowCY1 - 1})";
                        CY1WSheet.Cell(formulaRowCY1, 16).FormulaA1 = $"=COUNTA(J15:J{formulaRowCY1 - 1})";
                        CY1WSheet.Cell(formulaRowCY1, 21).FormulaA1 = $"=SUM(U15:U{formulaRowCY1 - 1})";
                    }

                    IXLWorksheet D2WSheet = book.Worksheet(7);
                    if (filasD2 > 0){
                        // insertar filas adicionales 
                        
                        D2WSheet.Row(startRowD2).InsertRowsBelow(filasD2 - 1);


                        var newRowsRangeD2 = D2WSheet.Range(startRowD2, 1, startRowD2 + filasD2 - 1, D2WSheet.LastColumnUsed().ColumnNumber());
                       

                        for (int rowD2 = 1; rowD2 <= D2.Count; rowD2++)
                        {

                            int j = 2;
                            var ROWD2F = rowD2 + 12;
                            var item = D2[rowD2 - 1];

                            D2WSheet.Cell(ROWD2F, j++).Value = 23;
                           
                            D2WSheet.Cell(ROWD2F, j++).Value = item.RFC;
                            D2WSheet.Cell(ROWD2F, j++).Value = item.CURP;
                            D2WSheet.Cell(ROWD2F, j++).Value = item.Nombre;
                            D2WSheet.Cell(ROWD2F, j++).Value = 1000;
                            D2WSheet.Cell(ROWD2F, j++).Value = item.partPres;
                            D2WSheet.Cell(ROWD2F, j++).Value = 1000;
                            D2WSheet.Cell(ROWD2F, j++).Value = item.CT;
                            D2WSheet.Cell(ROWD2F, j++).Value = 0;
                            D2WSheet.Cell(ROWD2F, j++).Value = item.CATEG;
                            D2WSheet.Cell(ROWD2F, j++).Value = 0;
                            D2WSheet.Cell(ROWD2F, j++).Value = 0;
                            D2WSheet.Cell(ROWD2F, j++).Value = item.CATEG;
                            D2WSheet.Cell(ROWD2F, j++).Value = item.CATEG;
                            D2WSheet.Cell(ROWD2F, j++).Value = 3;
                            D2WSheet.Cell(ROWD2F, j++).Value = item.tipoMov;
                            D2WSheet.Cell(ROWD2F, j++).Value = periodoInicial;
                            D2WSheet.Cell(ROWD2F, j++).Value = periodoFinal;

                        }
                        int formulaRowD2 = startRowD2 + filasD2;

                        D2WSheet.Cell(formulaRowD2 + 1, 3).FormulaA1 = $"=COUNTA(C13:C{formulaRowD2 - 1})";
                        D2WSheet.Cell(formulaRowD2 , 13).FormulaA1 = $"=COUNTA(C13:C{formulaRowD2 - 1})";
                        

                    }
                    IXLWorksheet D6WSheet = book.Worksheet(10);

                    if (filasD6 > 0)
                    {
                        // insertar filas adicionales 
                        
                        D6WSheet.Row(startRowD6).InsertRowsBelow(filasD6 - 1);                        
                        var newRowsRangeD6 = D6WSheet.Range(startRowD6, 1, startRowD6 + filasD6 - 1, D6WSheet.LastColumnUsed().ColumnNumber());
                        //newRowsRangeD6.Style.Fill.BackgroundColor = XLColor.White;

                        for (int rowD6 = 1; rowD6 <= D6.Count; rowD6++)
                        {

                            int j = 2;
                            var ROWD6F = rowD6 + 12;
                            var item = D6[rowD6 - 1];

                            D6WSheet.Cell(ROWD6F, j++).Value = 23;
                            D6WSheet.Cell(ROWD6F, j++).Value = item.CCT;
                            D6WSheet.Cell(ROWD6F, j++).Value = item.RFC;
                            D6WSheet.Cell(ROWD6F, j++).Value = item.CURP;
                            D6WSheet.Cell(ROWD6F, j++).Value = item.Nombre;
                            D6WSheet.Cell(ROWD6F, j++).Value = 2;
                            D6WSheet.Cell(ROWD6F, j++).Value = item.Categ;
                            D6WSheet.Cell(ROWD6F, j++).Value = 1201;
                            D6WSheet.Cell(ROWD6F, j++).Value = periodoInicial;                             
                            D6WSheet.Cell(ROWD6F, j++).Value = periodoFinal;
                            D6WSheet.Cell(ROWD6F, j++).Value = "DOCENTE FRENTE A GRUPO";
                            D6WSheet.Cell(ROWD6F, j++).Value = item.TotalPerc;

                        }
                        int formulaRowD6 = startRowD6 + filasD6;

                        D6WSheet.Cell(formulaRowD6, 4).FormulaA1 = $"=COUNTA(D13:D{formulaRowD6 - 1})";
                        D6WSheet.Cell(formulaRowD6, 13).FormulaA1 = $"=SUM(M13:M{formulaRowD6 - 1})";
                      
                    }

                    IXLWorksheet HWSheet = book.Worksheet(18);
                    if (filasH > 0)
                    {
                        // insertar filas adicionales 
                        
                        HWSheet.Row(startRowH).InsertRowsBelow(filasH - 1);
                        var newRowsRangeH = HWSheet.Range(startRowH, 1, startRowH + filasH - 1, HWSheet.LastColumnUsed().ColumnNumber());
              

                        for (int rowH = 1; rowH <= D2.Count; rowH++)
                        {

                            int j = 2;
                            var ROWHF = rowH + 12;
                            var item = H[rowH - 1];

                            HWSheet.Cell(ROWHF, j++).Value = item.TipoNom;
                            HWSheet.Cell(ROWHF, j++).Value = item.PartPres;
                            HWSheet.Cell(ROWHF, j++).Value = item.Plaza;
                            HWSheet.Cell(ROWHF, j++).Value = item.RFC;
                            HWSheet.Cell(ROWHF, j++).Value = item.CURP;
                            HWSheet.Cell(ROWHF, j++).Value = item.Nombre;
                            HWSheet.Cell(ROWHF, j++).Value = item.TipoMov;

                        }                  

                    }

                    int formulaRowBY1CARATULA = startRowBY1 + filasBY1;
                    int formulaRowCY1CARATULA = startRowCY1 + filasCY1;
                    int formulaD2CARATULA = startRowD2 + filasD2;
                    int formulaD6CARATULA = startRowD6 + filasD6;
                    int formulaHCARATULA = startRowH + filasH;

                    string sheetNameBY1 = BY1WSheet.Name;
                    string SheetNameCY1 = CY1WSheet.Name;
                    string SheetNameD2 = D2WSheet.Name;
                    string SheetNameD6 = D6WSheet.Name;
                    string SheetNameH = HWSheet.Name;
                    
                    IXLWorksheet CaratulaWSheet = book.Worksheet(1);
                    
                    CaratulaWSheet.Cell(27, 9).FormulaA1 = $"=COUNTA('{sheetNameBY1}'!C14:C{formulaRowBY1CARATULA - 1})";               
                    CaratulaWSheet.Cell(27, 15).FormulaA1 = $"=COUNTA('{SheetNameCY1}'!J15:J{formulaRowCY1CARATULA - 1})";
                    CaratulaWSheet.Cell(27, 17).FormulaA1 = $"=SUM('{sheetNameBY1}'!Y14:Y{formulaRowBY1CARATULA - 1})";
                    
                    CaratulaWSheet.Cell(28, 9).FormulaA1 = $"=COUNTA('{SheetNameCY1}'!E15:E{formulaRowCY1CARATULA - 1})";
                    CaratulaWSheet.Cell(28, 17).FormulaA1 = $"=SUM('{SheetNameCY1}'!U14:U{formulaRowCY1CARATULA - 1})";

                    CaratulaWSheet.Cell(29, 9).FormulaA1  = $"=COUNTA('{SheetNameD2}'!C13:C{formulaD2CARATULA - 1})";                   

                    CaratulaWSheet.Cell(32, 9).FormulaA1 = $"=COUNTA('{SheetNameD6}'!D13:D{formulaD6CARATULA - 1})";
                    CaratulaWSheet.Cell(32, 17).FormulaA1 = $"=SUM('{SheetNameD6}'!M13:M{formulaD6CARATULA - 1})";

                    CaratulaWSheet.Cell(40, 9).FormulaA1 = $"=COUNTA('{SheetNameH}'!E13:E{formulaHCARATULA - 1})";
                    
                    // Guardar el archivo modificado en un MemoryStream
                    using (var memory = new MemoryStream())
                    {
                    
                        book.SaveAs(memory);
                        var nombreExcel = string.Concat("ART 73 trimestre_",Trimestre,"_", "2024", ".xlsx");

                        await _JsService.InvokeAsync<object>(
                            "DownloadExcel",
                            nombreExcel,
                            Convert.ToBase64String(memory.ToArray())
                        );
                    }
                }
            }
            catch (Exception ex)
            {
                Console.Write(ex);
            }
        }
    }
}